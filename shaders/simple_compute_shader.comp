#version 450

layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform writeonly image2D outputImage;

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;


const int kernelSize = 5; // Taille du noyau de flou gaussien
const float sigma = 2.0;  // Écart-type du noyau de flou gaussien

void main() 
{
  ivec2 texel = ivec2(gl_WorkGroupID.xy);
    vec3 result = vec3(0.0);

    // Noyau de flou gaussien
    float kernel[kernelSize];
    for (int i = 0; i < kernelSize; i++) 
    {
        float x = float(i - kernelSize / 2);
        kernel[i] = exp(-0.5 * (x * x) / (sigma * sigma));
    }

    // Normalisation du noyau
    float kernelSum = 0.0;
    for (int i = 0; i < kernelSize; i++) 
    {
        kernelSum += kernel[i];
    }
    for (int i = 0; i < kernelSize; i++) 
    {
        kernel[i] /= kernelSum;
    }

    // Appliquer le flou gaussien
    for (int i = 0; i < kernelSize; i++) 
    {
        for (int j = 0; j < kernelSize; j++) 
        {
            ivec2 offset = ivec2(i - kernelSize / 2, j - kernelSize / 2);
            vec3 sampl = imageLoad(inputImage, texel + offset).rgb;
            result += sampl * kernel[i] * kernel[j];
        }
    }

    // Écrire le résultat dans l'image de sortie
    imageStore(outputImage, texel, vec4(result, 1.0));

}

